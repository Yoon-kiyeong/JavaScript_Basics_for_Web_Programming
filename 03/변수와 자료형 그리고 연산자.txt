변수와 자료형 그리고 연산자
자바스크립트에서 변수는 변하는 값을 저장할 때 사용한다. 상황에 따라 다른 값을 입력받아야 할 때 변수를 사용한다.

변수를 선언하는 규칙 세 가지
변수에는 컴퓨터가 구별할 수 있도록 이름을 붙여줘야 한다. 이를 '변수를 선언한다'라고 한다.
변수 선언은 아주 간단하다. var 키워드에 변수 이름을 적으면 된다.
var 변수이름;

그런데 변수를 선언할 때는 몇 가지 규칙이 있다.
규칙 1 - 이름은 의미 있게 짓는다.
변수의 이름을 아무 의미 없이 지으면 안 된다. a,b 같은 변수는 나중에 왜 만들었는지 알기 어렵다.

규칙 2 - 여러 단어를 연결한 변수 이름은 낙타모양으로 만들어 준다.
여러 단어를 연결하여 변수 이름을 지을 때는 첫 번째 단어는 소문자로, 두 번째 단어부터는 대문자로 시작하는 방법을 많이 사용한다.
이 규칙을 낙타 표기법(Camel Case)이라고 부른다.
낙타 표기법은 프로그램에는 영향을 주지 않는다. 하지만 개발자들 사이에서 오래전부터 암묵적으로 지키는 일종의 규칙이니 꼭 기억해 둘 것

규칙 3 - 선언할 수 없는 이름도 있다
변수 이름의 첫 글자는 반드시 문자나 밑줄 (_) 또는 달러 기호($)로 시작해야 하고, 그 후에는 문자나 밑줄, 달러 기호, 그리고 숫자를 사용할 수 있다.
따라서 다음과 같은 변수 이름은 사용할 수 없다.
var 1value;	//오류 발생
var -key;		//오류 발생
var #obj;		//오류 발생

변수에 값이나 식 저장하기
변수에 값을 저장하려면 변수 오른쪽에 = 기호를 붙이고 오른쪽에 저장하고 싶은 값이나 식을 쓰면 된다. 이때 변수에 값을 저장하는 방법은 '변수를 선언하면서 저장하는 방법'과 '변수를 선언한 다음에 저장하는 방법'이 있다.
var apple = "yummy";	//변수를 선언하면서 값을 저장
var banana;
banana = "long and yummy"	//변수를 선언한 다음에 값을 저장

변수에 식을 저장할 경우 식에 있는 변수는 미리 선언해 두어야 한다.

let과 const 예약서
ES6 버전부터는 변수를 선언할 때 var 예약어 외에 let과 const 예약어를 사용할 수 있다.
let으로 선언한 변수는 블록({}로 묶은 범위)을 벗어나면 사용할 수 없다.
그리고 const는 상숫값을 선언할 때 사용한다.

자료형 이해하기
자료형의 종류
자료형(Data Type)이란 컴퓨터가 처리하는 자료의 형태를 말한다.
자바스크립트의 자료형은 값이 하나인 '기본형'과 여러 값을 한꺼번에 담고 있는 '복합형'으로 구별한다.
실무에서는 자료형을 데이터 타입, 데이터형, 데이터 유형 등으로 부른다.
	자료형				설명
기본형	number(숫자)	따옴표 없이 표기한 숫자를 나타낸다.
	string(문자열)	작은따옴표(')나 큰따옴표(")로 묶어 나타낸다.
	boolean(논리형)	참(true)과 거짓(false)이란 두 가지 값만 가지고 있는 유형이다.
	undefined	자료형을 지정하지 않았을 때의 유형이다.
			예를 들어 변수를 선언만 하고 값을 정의하지 않으면 undefined가 된다.
	null		값이 유효하지 않을 때의 유형이다.
복합형	array(배열)	하나의 변수에 여러 값을 저장하는 유형이다.
	object(객체)	함수와 속성이 함께 포함된 유형이다.

자료형을 확인하는 방법 - typeof 연산자
자바스크립트는 변수에 저장하는 값에 따라 자료형이 결정된다.
예를 들어 value 변수에 10을 저장하면 value의 자료형은 number(숫자)가 되고, "10"을 저장하면 String(문자열)이 된다.
그러면 변수(또는 값)가 정말 어떤 자료형인지 알고 싶을 때는 typeof 연산자를 사용하면 된다.
typeof 연산자의 사용 방법은 다음과 같다.
typeof 1990;
>>"number"
typeof "hello";
>> "String"

숫자형 - 정수
자바스크립트에서 숫자는 정수와 실수로 나누어 구분한다.
정수는 소수점 없는 숫자를 가리킨다. 정수는 표현 방법에 따라 10진수, 8진수, 16진수의 세 가지 유형으로 나누기도 한다.

숫자형 - 실수
실수는 소수점이 있는 숫자를 가리킨다. typeof 연산자로 확인하면 정수와 마찬가지로 결괏값으로 number를 출력한다.
즉 자바스크립트는 정수와 실수 모두 number로 취급한다.
그런데 자바스크립트에서 실수를 계산할 때는 주의할 점이 하나 있다.
자바스크립트에서는 0.1이나 0.2를 진수로 변환해서 계산하는데 이 때 자릿수가 많은 소수로 변환되고, 그 상태에서 0.1과 0.2를 더하게 된다. 따라서 정밀하게 숫자를 계산하는 프로그램을 만들 때는 항상 주의해야 한다.

문자형
문자형(String)은 작은따옴표(')나 큰 따옴표(")로 묶은 자료를 의미한다. 즉 숫자도 작은따옴표나 큰따옴표로 묶으면 문자형으로 인식한다.
단 작은따옴표로 시작한 문자형 자로는 작은 따옴표로 끝맺음 해야 한다. 큰따옴표도 마찬가지이다.
만약 큰따옴표로 묶은 문자형 안에 큰따옴표로 묶은 문장을 넣으려면 어떻게 해야 할까?
이런 경우에는 큰따옴표가 중복되지 않도록 큰따옴표를 작은따옴표로 바꿔 주어야 한다.
문자형은 실무에서 스트링(String)이라고 부르기도 한다.

논리형
논리형(Boolean)은 참(True)과 거짓(False)이라는 값을 표현하는 자료형이다.
주로 프로그램에서 조건을 확인할 때 많이 사용한다.

undefined와 null
undefined은 자료형이 정의되지 않았을 때의 상태이다. 자바스크립트에서는 변수를 선언할 때 미리 자료형을 지정하지 않고 값을 할당할 때 그 값에 따라 결정한다.
즉 변수가 undefined라는 것은 '처음부터 변수에 값이 할당되지 않았다.'는 의미이지 undefined 자료형을 가진다는 뜻이 안디ㅏ.
그렇다면 null은 어떤 의미를 가직조 있을까? null은 undefined와 구별해서 생각해야 하는 개념이다.
null은 '처음에 할당된 값이 더는 유효하지 않음'을 의미한다.
컴퓨터는 값이 처음부터 없었던 경우와 더는 유효하지 않게 된 경우를 구별한다. 보통 변수를 초기화할 때 null을 많이 사용한다.

배열
자바스크립트에는 하나의 변수에 여러 값을 저장할 수 있는 배열 유형이 있다. 
배열에 저장할 자료를 쉼표로 구분해서 대괄호([])로 묶으면 배열을 선언할 수 있다. 대괄호 안에 자료를 입력하지 않음녀 빈 배열이 만들어 진다. 물론 빈 배열도 배열을 선언한 것이다.

배열의 특정 값을 가져올 때 사용하는 인덱스
배열 이름만 사용하면 배열 내용 전체를 가져오고, 배열 이름과 대괄호([]) 안에 0이나 1,2같은 숫자를 넣어서 함께 사용하면 해당 위치의 값만 가져온다. 이때 사용한 0,1,2,3을 배열의 인덱스라고 부른다. 인덱스는 0부터 시작한다.

객체
객체(Object)는 사용 방법이 조금 독특하다.
객체는 여러 자료를 중괄호({})로 묶을 수 있다. 여러 자료를 묶는다는 점은 배열과 비슷하지만 저장하는 값의 모양이 조금 다르다.
키(Key)와 값(Value)을 콜론(:)을 사용하여 한 쌍으로 짝지어야 한다.

자바스크립트 자료형의 특징
자바스크립트는 미리 변수의 자료형을 지정하지 않는다. 변수를 지정하여 할당만 하면 된다.
바로 이 방식을 '느슨한 자료형 체크(Weak Data Type Check)'라고 한다.
그래서 자바스크립트로 프로그램을 만들 때에는 변수에 의도한 값이 정확하게 들어갔는지 확인해야 한다.

연산자 이해하기
할당 연산자 응용하기
할당 연산자(Assignment Operator, =)는 자바스크립트에서 가장 많이 사용하는 연산자이다.
지금까지 변수에 값을 할당하는 정도로 사용했지만 할당 연산자는 산술 연산자(+, -, *,/,%)와 조합해서 사용할 수도 있다.

할당 연산자 응용		예		의미
	+=		y += x		y = y + x
	-=		y -= x		y = y - x
	*=		y *= x		y = y * x
	/=		y /= x		y = y / x
	%=		y %= x		y = y % x

더하기 연산자와 연결 연산자 구별하기
더하기 연산자로 '문자열을 더할 때'는 연결 연산자라는 또 다른 이름으로 부른다.
즉 두 수를 더할 때에도 + 기호를 사용하지ㅏㅁㄴ 두 개 이상의 문자열을 연결할 때에도 + 기호를 사용한다. 더하기 연산자와 연결 연산자를 꼭 구별해야한다.
 